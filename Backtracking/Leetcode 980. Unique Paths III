Problem URL: https://leetcode.com/problems/unique-paths-iii/
Leetcode 980. Unique Paths III

Solution: (Using Backtracking)

class Solution {
public:
    
    int isVisited[21][21] = {0};
    
    bool isSafe(vector<vector<int>>& grid, int i, int j, int m, int n){
    
        if(j >= n || i >= m || i < 0 || j < 0 ){
            return false;
        }
        
        if(isVisited[i][j] == 0 && (grid[i][j] == 0 || grid[i][j] == 2)){
            return true;
        }
        
        return false;
    }
    
    int countPath(vector<vector<int>>& grid, int m, int n, int i, int j, int cntZero, int count){
        
        if(grid[i][j] == 2){
            if(count == cntZero){
                return 1;
            }
            return 0;
        }
        
        int sum = 0;
        isVisited[i][j] = 1;
        
        if(isSafe(grid, i, j+1, m , n)){
            count++;
            sum += countPath(grid, m, n, i, j + 1, cntZero, count);
            count--;
        }
        if(isSafe(grid, i, j-1, m, n)){
            count++;
            sum = sum + countPath(grid, m, n, i, j - 1, cntZero, count);
            count--;
        }
        if(isSafe(grid, i + 1, j, m, n)){
            count++;
            sum += countPath(grid, m, n, i + 1, j, cntZero, count);
            count--;
        }
        if(isSafe(grid, i - 1, j, m, n)){
            count++;
            sum += countPath(grid, m, n, i - 1, j, cntZero, count);
            count--;
        }
       
        isVisited[i][j] = 0;
        return sum;
    }
  
    int uniquePathsIII(vector<vector<int>>& grid) {
        
        int m = grid.size();
        int n = grid[0].size();
        int cntZero = 0;
        int srci = 0, srcj = 0;
        
        for(int i = 0; i < m; i++){
            for(int j = 0; j < n; j++){
                if(grid[i][j] == 0){
                    cntZero++;
                }
                
                if(grid[i][j] == 1){
                    srci = i;
                    srcj = j;
                }
            }
        }
        
        int count = 0;
        
        return countPath(grid, m, n, srci, srcj, ++cntZero, count);   
    }
};
